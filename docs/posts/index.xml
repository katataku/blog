<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on katataku&#39;s blog</title>
        <link>https://katataku.dev/posts/</link>
        <description>Recent content in Posts on katataku&#39;s blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>jp-JP</language>
        <lastBuildDate>Sun, 31 Jan 2021 16:36:33 +0900</lastBuildDate>
        <atom:link href="https://katataku.dev/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Netdataをubuntu(on docker)にInstallしてみた</title>
            <link>https://katataku.dev/posts/netdata-install-on-ubuntu/</link>
            <pubDate>Sun, 31 Jan 2021 16:36:33 +0900</pubDate>
            
            <guid>https://katataku.dev/posts/netdata-install-on-ubuntu/</guid>
            <description>会社でNetdataの紹介をされたので、インストールと動作確認をしてみた。 ググった情報だとエラーになったため、補足も行う。 動作環境 MacBook Air (Retina, 13-inch, 2020)</description>
            <content type="html"><![CDATA[<p>会社でNetdataの紹介をされたので、インストールと動作確認をしてみた。
ググった情報だとエラーになったため、補足も行う。</p>
<h2 id="動作環境">動作環境</h2>
<ul>
<li>MacBook Air (Retina, 13-inch, 2020)</li>
<li>Mac OS Big Sur 11.1</li>
<li>Docker Engine v20.10.2</li>
<li>Ubuntu(Docker image) f63181f19b2f</li>
</ul>
<h2 id="やったこと">やったこと</h2>
<h3 id="事前準備">事前準備</h3>
<p>ubuntuの起動</p>
<pre><code>docker run -it -p 8080:19999 ubuntu bash
</code></pre><p>以下のコマンドで事前準備を実施。</p>
<pre><code>apt-get update
apt-get install zlib1g-dev gcc make git autoconf autogen automake pkg-config
apt-get install uuid-dev
</code></pre><p>途中で対話的な設定が必要。
選択肢が表示されるので、数字を入れてEnter.</p>
<h3 id="インストールと実行">インストールと実行</h3>
<p>以下コマンドを実行</p>
<pre><code>git clone https://github.com/firehol/netdata.git --depth=1
cd netdata
./netdata-installer.sh
</code></pre><p>以下の文言が表示されていれば、OK</p>
<pre><code>
 --- We are done! ---

  ^
  |.-.   .-.   .-.   .-.   .-.   .  netdata                          .-.   .-
  |   '-'   '-'   '-'   '-'   '-'   is installed and running now!  -'   '-'
  +----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+---&gt;
</code></pre><p>mac上のブラウザから http://localhost:8080 にアクセスするとnetdataの画面が見れる。
とてもスッキリと情報がまとまっており、美しい。</p>
<h3 id="トラブルシュート">トラブルシュート</h3>
<p>インストール時に、以下のエラーが出た場合について。</p>
<pre><code>Sorry! netdata failed to build...

You may need to check these:

1. The package uuid-dev (or libuuid-devel) has to be installed.

   If your system cannot find libuuid, although it is installed
   run me with the option:  --libs-are-really-here

2. The package zlib1g-dev (or zlib-devel) has to be installed.

   If your system cannot find zlib, although it is installed
   run me with the option:  --libs-are-really-here

3. You need basic build tools installed, like:

   gcc make autoconf automake pkg-config

   Autoconf version 2.60 or higher is required.

If you still cannot get it to build, ask for help at github:

   https://github.com/netdata/netdata/issues
</code></pre><p>上記のエラーが出た場合は、以下のコマンドで追加のインストールを行うことで、うまく行った。</p>
<pre><code>apt install libuv1-dev
</code></pre><h2 id="参考文献">参考文献</h2>
<p>以下のサイトを参考にした。
環境の違いなのか、バージョンの違いなのか、記載のままだとうまくいかった。</p>
<p><a href="http://mezina1942.hatenablog.com/entry/2017/11/04/003606">http://mezina1942.hatenablog.com/entry/2017/11/04/003606</a></p>
<p><a href="https://github.com/netdata/netdata/issues/7919">https://github.com/netdata/netdata/issues/7919</a></p>
]]></content>
        </item>
        
        <item>
            <title>AWS SAP受験記</title>
            <link>https://katataku.dev/posts/aws-sap/</link>
            <pubDate>Mon, 11 Jan 2021 23:45:31 +0900</pubDate>
            
            <guid>https://katataku.dev/posts/aws-sap/</guid>
            <description>AWS認定 Solution Architect Professionalに合格したので勉強したポイントを記録する。 インプット学習 AWSの公式動画、「Exam Readiness: AWS Certified Solutions Architect – Pro</description>
            <content type="html"><![CDATA[<p>AWS認定　Solution Architect Professionalに合格したので勉強したポイントを記録する。</p>
<h2 id="インプット学習">インプット学習</h2>
<p>AWSの公式動画、「Exam Readiness: AWS Certified Solutions Architect – Professional」を観た。
この際に、不明な用語を全てメモしておく。</p>
<p>その後、メモをもとに、blackbeltオンラインセミナーを順番に観ていく。</p>
<h2 id="アウトプット学習">アウトプット学習</h2>
<p>udemyの試験対策講座を受講した。
「問題を解く」→「間違った分野のblackbeltセミナーや公式documentを見返す」ということを繰り返す。（本来は2-3回やりたかったが、1回しかできてない。。）</p>
<p>申し込み前には、公式の模試を受験した。6割の正答率だったので、気合を入れ直した。</p>
<h2 id="試験当日">試験当日</h2>
<p>自宅から最寄りの試験会場を選択した。
SAAとは違い、当日の勉強はやらないことにした。</p>
<h2 id="つまづきポイント">つまづきポイント</h2>
<p>自分がつまずいたポイントは以下の通り。</p>
<h3 id="direct-connect">Direct Connect</h3>
<p>頻出分野だが、実際に扱う機会が少ない。（ほぼない）</p>
<p>2-3回Blackbelt恩来セミナーをみてイメージを膨らませた。</p>
<h3 id="データベースまわり">データベースまわり</h3>
<p>概念が混乱するので、整理が必要。</p>
<ul>
<li>RDSとAuroraでリードレプリカがどう異なるのか。AZ障害時に、どういう動きになるのか。</li>
<li>高速化手法は何があるのか。</li>
<li>リージョン障害時の影響は何か。リージョンまたぎのレプリケーションはどうする？
など。</li>
</ul>
<p>本来はSAAレベルでも理解すべきDAX周りの理解も甘かったので、復習になった。</p>
]]></content>
        </item>
        
        <item>
            <title>Python Division</title>
            <link>https://katataku.dev/posts/python-division/</link>
            <pubDate>Sun, 01 Nov 2020 20:30:55 +0900</pubDate>
            
            <guid>https://katataku.dev/posts/python-division/</guid>
            <description>pythonの割り算は大きく2種類存在する。&amp;quot;/&amp;ldquo;と&amp;rdquo;//&amp;ldquo;である。 違いについて、混乱し、検索</description>
            <content type="html"><![CDATA[<p>pythonの割り算は大きく2種類存在する。&quot;/&ldquo;と&rdquo;//&ldquo;である。
違いについて、混乱し、検索しても納得がいかなかったので実機で動作を確認した。</p>
<h1 id="定義">定義</h1>
<h2 id="演算子">/演算子</h2>
<p>こちらが通常の割り算。結果はfloat型（不動小数点型）。pythonの不動小数点型も他の言語と同様に2の補数表現として表されている。</p>
<h2 id="演算子-1">//演算子</h2>
<p>こちらは商を求める演算。結果はint型（整数型）。あくまで、整数の範囲で割り算を行い、商を返す。</p>
<h2 id="intによるキャスト">int()によるキャスト</h2>
<p>int()はfloat型→int型への型キャスト演算である。
int()は少数部の切り捨て演算にあたる。
int(3.5)→3</p>
<h1 id="考察">考察</h1>
<p>ここで気になるのがint()と/演算子との組み合わせである。
数学的には、a//bとint(a/b)は同一の結果となる。</p>
<p>しかし実装上は異なる。
具体例を見てみる。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">a <span style="color:#f92672">=</span> int(input())
<span style="color:#75715e"># 987654321</span>


sum_a1 <span style="color:#f92672">=</span> int(a <span style="color:#f92672">*</span> (a <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>) <span style="color:#f92672">/</span> <span style="color:#ae81ff">2</span>) <span style="color:#f92672">%</span> <span style="color:#ae81ff">998244353</span>
sum_a2 <span style="color:#f92672">=</span> int(a <span style="color:#f92672">*</span> (a <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>) <span style="color:#f92672">//</span> <span style="color:#ae81ff">2</span>) <span style="color:#f92672">%</span> <span style="color:#ae81ff">998244353</span>
<span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;sum_a1 : {}&#34;</span><span style="color:#f92672">.</span>format(sum_a1))
<span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;sum_a2 : {}&#34;</span><span style="color:#f92672">.</span>format(sum_a2))
<span style="color:#75715e">#sum_a1 : 3544418</span>
<span style="color:#75715e">#sum_a2 : 3544427</span>


sum_b1 <span style="color:#f92672">=</span> a <span style="color:#f92672">*</span> (a <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>) <span style="color:#f92672">/</span> <span style="color:#ae81ff">2</span>
sum_b2 <span style="color:#f92672">=</span> a <span style="color:#f92672">*</span> (a <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>) <span style="color:#f92672">//</span> <span style="color:#ae81ff">2</span>
<span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;sum_b1 : {}&#34;</span><span style="color:#f92672">.</span>format(sum_b1))
<span style="color:#66d9ef">print</span>(<span style="color:#e6db74">&#34;sum_b2 : {}&#34;</span><span style="color:#f92672">.</span>format(sum_b2))
<span style="color:#75715e">#sum_b1 : 4.877305293888127e+17</span>
<span style="color:#75715e">#sum_b2 : 487730529388812681</span>

</code></pre></div><p>理由は、一度float型で読み取ると誤差が生じるためである。
誤差のある数字どうしを掛け算して桁の大きな数字にすると、誤差が大きくなり、切り捨て演算の結果が変わることになる。</p>
<h2 id="まとめ">まとめ</h2>
<p>不必要にfloatが発生しないようにするべし。
Decimal型を使っても安全かも。</p>
]]></content>
        </item>
        
        <item>
            <title>競技プログラミングの準備をしてみた。</title>
            <link>https://katataku.dev/posts/atcoder-kitting/</link>
            <pubDate>Sun, 26 Jul 2020 10:39:39 +0900</pubDate>
            
            <guid>https://katataku.dev/posts/atcoder-kitting/</guid>
            <description>はじめてatcoderのコンテストに 参加してみた。 「競技プログラミングの準備」と調べてみると、アルゴリズムの勉強手法だとか、動作環境のセット</description>
            <content type="html"><![CDATA[<p>はじめてatcoderのコンテストに
参加してみた。</p>
<p>「競技プログラミングの準備」と調べてみると、アルゴリズムの勉強手法だとか、動作環境のセットアップ手法の解説しか出てこなかった。
ここでは、実際どうやって実行するのか、どういう流れで提出するのか、そのために何を準備するのかを記載する。</p>
<p>大きな流れは以下の通り。</p>
<ol>
<li>例を利用したテストケースの準備</li>
<li>コーディング</li>
<li>実行＆自動テスト</li>
<li>提出</li>
</ol>
<h2 id="例を利用したテストケースの準備">例を利用したテストケースの準備</h2>
<p>問題には入力と出力の例が用意されている。
その内容を利用して自動テストを実行できるようにする。</p>
<p>今回のスクリプトでは「input」「answer」というフォルダーに同名のファイルに、入出力を記載する。</p>
<figure>
    <img src="/atcoder-script.jpeg"/> <figcaption>
            <h4>フォルダー構成</h4>
        </figcaption>
</figure>

<p>inputフォルダーにある入力例に対して、テストを実施する。</p>
<h2 id="コーディング">コーディング</h2>
<p>main.pyというファイル名でコーディングを行う。
内容は全量コピペで提出できる内容とする。</p>
<h2 id="実行自動テスト">実行＆自動テスト</h2>
<p>ここが本題。
やりたいことは、「テストケースを用いた実行＆回答例との一致判定」。</p>
<p>以下のスクリプトを用意し、毎回実行するようにした。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e">#!/bin/sh
</span><span style="color:#75715e"></span>rm output/*

dirpath<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;./input&#34;</span>
files<span style="color:#f92672">=</span><span style="color:#e6db74">`</span>ls $dirpath<span style="color:#e6db74">`</span>

pfinrf <span style="color:#e6db74">&#34;\n&#34;</span>
<span style="color:#66d9ef">for</span> file in $files;
<span style="color:#66d9ef">do</span>
    printf <span style="color:#e6db74">&#34;=====</span><span style="color:#e6db74">${</span>file<span style="color:#e6db74">}</span><span style="color:#e6db74">=======\n&#34;</span>

    input<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>file<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>
    output<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>file<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>
    answer<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>file<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>

    python main.py &lt;input/<span style="color:#e6db74">${</span>input<span style="color:#e6db74">}</span> | tee output/<span style="color:#e6db74">${</span>output<span style="color:#e6db74">}</span>

    <span style="color:#66d9ef">if</span> <span style="color:#f92672">[</span> -e answer/<span style="color:#e6db74">${</span>answer<span style="color:#e6db74">}</span> <span style="color:#f92672">]</span>; <span style="color:#66d9ef">then</span>
        diff -u output/<span style="color:#e6db74">${</span>output<span style="color:#e6db74">}</span> answer/<span style="color:#e6db74">${</span>answer<span style="color:#e6db74">}</span> &gt;tmp
        <span style="color:#66d9ef">if</span> <span style="color:#f92672">[</span> $? -eq <span style="color:#ae81ff">0</span> <span style="color:#f92672">]</span>; <span style="color:#66d9ef">then</span>
            printf <span style="color:#e6db74">&#34;\nCA\n&#34;</span>
        <span style="color:#66d9ef">elif</span> <span style="color:#f92672">[</span> $? -eq <span style="color:#ae81ff">1</span> <span style="color:#f92672">]</span>; <span style="color:#66d9ef">then</span>
            printf <span style="color:#e6db74">&#34;\n--- diff output answer --------------------\n&#34;</span>
            cat tmp
            printf <span style="color:#e6db74">&#34;\nWA\n&#34;</span>
        <span style="color:#66d9ef">fi</span>
        rm tmp
    <span style="color:#66d9ef">fi</span>
<span style="color:#66d9ef">done</span>
</code></pre></div><p>入力例が複数あっても、回答フォルダーに同名のファイルがあればテストできる。</p>
<p>以下のコマンドで実行を行う。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">./run.sh
</code></pre></div><h2 id="今後の課題">今後の課題</h2>
<ul>
<li>典型的な入力処理のテンプレート化</li>
<li>入出力例の取得自動化</li>
</ul>
<p>問題サイトをスクレイピングすれば、入出力例を自動で取得できる気がする。</p>
]]></content>
        </item>
        
        <item>
            <title>GitHub pagesのブログのURLをwwwありからwwwなしに変更した</title>
            <link>https://katataku.dev/posts/url-www/</link>
            <pubDate>Wed, 22 Jul 2020 22:19:09 +0900</pubDate>
            
            <guid>https://katataku.dev/posts/url-www/</guid>
            <description>背景 google adsenseの登録をした。 はじめてのドメインの際は、サブドメイン（wwwあり）は不可とのことで、ブログURLを変更することにした。 検</description>
            <content type="html"><![CDATA[<h2 id="背景">背景</h2>
<p>google adsenseの登録をした。
はじめてのドメインの際は、サブドメイン（wwwあり）は不可とのことで、ブログURLを変更することにした。</p>
<p>検索するとwwwなしからwwwありに変更する例しか見つからなかったので、記録に残す。</p>
<h2 id="やること">やること</h2>
<p>やることは以下の3点。</p>
<ul>
<li>DNSの設定変更</li>
<li>GitHub pages設定変更</li>
<li>（リリーススクリプト修正）</li>
<li>hugo設定変更</li>
</ul>
<h3 id="dns設定変更">DNS設定変更</h3>
<p>ここではgoogle DNSの設定変更をおこなう。
<a href="https://docs.github.com/ja/github/working-with-github-pages/managing-a-custom-domain-for-your-github-pages-site#configuring-an-apex-domain">こちら</a>の記載を参考に、ルートパスのAレコード登録をおこなう。</p>
<p>また、wwwレコードをルートでCNAME登録する。</p>
<h3 id="github-pages設定変更">GitHub pages設定変更</h3>
<p>GitHub  のsettingsメニューからドメインの記載変更する。
また、私の場合は、localにあるリリーススクリプトを修正する。</p>
<p>どちらもCNAMEファイルの記載を変更するもの。最終的なCNAMEファイルはこちら。</p>
<h3 id="hugo設定変更">hugo設定変更</h3>
<p>config.tomlのbase URLを変更後のURLに変更する。</p>
]]></content>
        </item>
        
        <item>
            <title>hugoで作成したサイトマップの内容がGoogle Search Consoleでインデックス登録されていなかった</title>
            <link>https://katataku.dev/posts/sitemap-https/</link>
            <pubDate>Sun, 19 Jul 2020 15:19:46 +0900</pubDate>
            
            <guid>https://katataku.dev/posts/sitemap-https/</guid>
            <description>背景 サーチコンソール上で、新規追加した投稿のURL検査を実施したところ以下の表示がされていた。 サイトマップ 該当なし hugoで自動生成されたサ</description>
            <content type="html"><![CDATA[<h2 id="背景">背景</h2>
<p>サーチコンソール上で、新規追加した投稿のURL検査を実施したところ以下の表示がされていた。</p>
<pre><code class="language-sitemap" data-lang="sitemap">サイトマップ　該当なし
</code></pre><p>hugoで自動生成されたサイトマップを登録しているので、原因を調査した。</p>
<h2 id="sitemapxmlの確認">sitemap.xmlの確認</h2>
<p>自動生成されるsitemap.xmlの中身を実際に見てみて、原因を確認する。
自動生成されるURLは以下の通り。</p>
<pre><code class="language-url" data-lang="url">https://www.katataku.dev/sitemap.xml
</code></pre><p>内容を見てみると、すべてhttpから始まるURLになっていた。</p>
<h2 id="baseurlの誤り">baseURLの誤り</h2>
<p>config.tomlの指定を確認する。
baseURLの指定がhttpsではなく、httpになっていることが判明。
以下の通り修正。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-toml" data-lang="toml"><span style="color:#a6e22e">baseURL</span> = <span style="color:#e6db74">&#34;https://www.katataku.dev&#34;</span>
</code></pre></div><p>修正した結果サイトマップの内容はhttpsに変更されていた。
数日後サーチコンソールの画面上インデックスの状況を再確認する。</p>
<h2 id="考察">考察</h2>
<p>baseURLのプロトコルが誤っていても、閲覧する上で問題は検知できない。
理由は以下二点。</p>
<ul>
<li>localで確認する際にはhttp化される。</li>
<li>GitHub上ではhttpsにリダイレクトされる。</li>
</ul>
<p>GitHubの仕組みは知っていたが、上記は知らなかった。
hugo賢い。</p>
]]></content>
        </item>
        
        <item>
            <title>Github Pagesで独自ドメインを設定したらhugoブログが壊れた</title>
            <link>https://katataku.dev/posts/hugo-cname/</link>
            <pubDate>Sat, 18 Jul 2020 10:06:54 +0900</pubDate>
            
            <guid>https://katataku.dev/posts/hugo-cname/</guid>
            <description>独自ドメインを導入したら、ブログの表示崩れが発生したので原因と対策を調べた。 予兆 事件の予兆は発生していた。 GitHubで独自ドメイン設定をし</description>
            <content type="html"><![CDATA[<p>独自ドメインを導入したら、ブログの表示崩れが発生したので原因と対策を調べた。</p>
<h2 id="予兆">予兆</h2>
<p>事件の予兆は発生していた。
GitHubで独自ドメイン設定をした後git pushがうまくいかない。
原因はGitHub側で生成されるファイル「CNAME」。</p>
<p>CNAMEの内容としては設定している独自ドメインが記載されているだけ。
上記のgit pushエラーに対してはgit pullを行うことで解消した。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">git pull origin master
</code></pre></div><p>git pullを経て無事git pushが成功した。</p>
<h2 id="表示崩れが発生">表示崩れが発生</h2>
<p>上記git pushの結果表示崩れが発生した。
GitHub上の独自ドメイン設定を確認するとドメイン設定が消えている。
gitのログを見るとCNAMEファイルの削除が発生していた。</p>
<h2 id="何が起きたか">何が起きたか</h2>
<p>hugoコマンドでCNAMEが消されていた。
詳細には、&ndash;cleanDestinationDirオプションをつけて、毎回不要ファイルの削除を行っている。
この削除対象にCNAMEファイルが入っているようで、毎回削除された状態でGitHubにpushされていたようだった。</p>
<h2 id="対策">対策</h2>
<p>CNAMEファイルのマスターを退避し、毎回コピーするscriptに差し替えた。
現状のdeploy用のスクリプトは以下の通り。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e">#!/bin/sh
</span><span style="color:#75715e"></span>
echo -e <span style="color:#e6db74">&#34;\033[0;32mDeploying updates to GitHub...\033[0m&#34;</span>

hugo --cleanDestinationDir

cp ./CNAME docs


git add docs/

msg<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;rebuilding site `date`&#34;</span>
<span style="color:#66d9ef">if</span> <span style="color:#f92672">[</span> $# -eq <span style="color:#ae81ff">1</span> <span style="color:#f92672">]</span>
  <span style="color:#66d9ef">then</span> msg<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span>$1<span style="color:#e6db74">&#34;</span>
<span style="color:#66d9ef">fi</span>
git commit -m <span style="color:#e6db74">&#34;</span>$msg<span style="color:#e6db74">&#34;</span>

git push origin master
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>初めてRFC読んでみた その2</title>
            <link>https://katataku.dev/posts/rfc6749-2/</link>
            <pubDate>Fri, 17 Jul 2020 15:51:29 +0900</pubDate>
            
            <guid>https://katataku.dev/posts/rfc6749-2/</guid>
            <description>はじめに 引き続き読み進めていく。 RFCらしい文体が目立ってきた。 2.クライアント登録 クライアントは事前に認可サーバへの登録が必要。 2.1クラ</description>
            <content type="html"><![CDATA[<h2 id="はじめに">はじめに</h2>
<p>引き続き読み進めていく。
RFCらしい文体が目立ってきた。</p>
<h2 id="2クライアント登録">2.クライアント登録</h2>
<p>クライアントは事前に認可サーバへの登録が必要。</p>
<h3 id="21クライアントタイプ">2.1クライアントタイプ</h3>
<p>2つのクライアントタイプがある。</p>
<ul>
<li>コンフィデンシャル</li>
</ul>
<p>クレデンシャルの秘密が保持できるクライアント。セキュアなサーバなど。</p>
<ul>
<li>パブリック</li>
</ul>
<p>クレデンシャルの秘密が保持できないクライアント。スマホアプリなど。</p>
<h3 id="22クライアント識別子">2.2クライアント識別子</h3>
<p>文字列。秘密じゃないので、これだけで認証に使うのは禁止。</p>
<h3 id="23クライアント認証">2.3クライアント認証</h3>
<p>クライアントタイプがコンフィデンシャルな場合は、クライアントの認証を行う。
方式はパスワード認証か、それ以外か。</p>
<h4 id="231クライアントパスワード">2.3.1クライアントパスワード</h4>
<p>クライアントIDとクライアントシークレット（ID/パスワード）を利用して認証する。</p>
<p>ここには、いくつか注意事項の記載がある。「basic認証のサポートは必須」「TLSの利用が必須」「ブルートフォースアタック対策は必須」など。</p>
<h4 id="232その他の認証方式">2.3.2その他の認証方式</h4>
<p>その他の認証方式を利用してもいいけど、明確にすることが必須。</p>
<h3 id="24未登録クライアント">2.4未登録クライアント</h3>
<p>未登録クライアントを利用してもいい。（「本仕様で利用を排除するものではない」というRFCらいし書き方。）
ただし、そのような利用は、本仕様のスコープ外。各自、セキュリティに気をつけて考えてね。</p>
]]></content>
        </item>
        
        <item>
            <title>初めてRFC読んでみた その１</title>
            <link>https://katataku.dev/posts/rfc6749-1/</link>
            <pubDate>Wed, 15 Jul 2020 22:18:40 +0900</pubDate>
            
            <guid>https://katataku.dev/posts/rfc6749-1/</guid>
            <description>RFCを読もう 業務でAPI GWの認証認可部分を担当することになった。 引継ぎ元となる先輩に認証認可の入門書のオススメを聞いたところ、 「世の中の</description>
            <content type="html"><![CDATA[<h2 id="rfcを読もう">RFCを読もう</h2>
<p>業務でAPI GWの認証認可部分を担当することになった。
引継ぎ元となる先輩に認証認可の入門書のオススメを聞いたところ、
「世の中の入門書は中級者向けだから、RFC読めばいいよ」という、お言葉をいただいた。</p>
<p>そこで、はじめてRFCを読むわけだが、
人目見ただけで分量に嫌気が差した。</p>
<p>世の中には簡単に説明している記事はあるが、読みたいのはあくまでRFC。
そこで、あくまでRFCの記載内容にしたがって、簡単に要約してみる。</p>
<p>今回は<a href="https://openid-foundation-japan.github.io/rfc6749.ja.html">RFC6749</a>を読むことにする。
なお、実装にあたっては厳密性が重要になるため、原文（もちろん英語版）で理解することが前提とのこと。</p>
<h2 id="1はじめに">1.はじめに</h2>
<p>要約と言いつつ、さっそく銀行と通帳アプリで例えることにする。</p>
<p>通帳アプリに銀行のパスワード教えるのはいまいちだよね。
なぜなら</p>
<ul>
<li>通帳アプリが利用者本人とまったく同じ権限使えるよね。</li>
<li>利用者が通帳アプリを複数使っていた場合、アプリごとに利用を停止できない。パスワード変更すれば停止できるけど、全部利用止まっちゃうよね。</li>
<li>通帳アプリの情報漏洩が問題だよね。
という理由。</li>
</ul>
<p>そこで、権限移譲用の別のトークンを用意しよう！</p>
<h3 id="11登場人物">1.1登場人物</h3>
<p>登場人物は以下の4種類。</p>
<ul>
<li>リソースオーナー：通帳アプリの利用者（個人情報のオーナーってイメージ）</li>
<li>リソースサーバ：銀行のサーバ。</li>
<li>クライアント：通帳アプリ</li>
<li>認可サーバ ：通帳アプリにトークンを発行するサーバ 。銀行のサーバと同じでもいいし、違うかもしれない。</li>
</ul>
<h3 id="12プロトコルフロー">1.2プロトコルフロー</h3>
<p>プロトコルフローは大きく分けると3つの工程で成り立っている。</p>
<ol>
<li>
<p>クライアントとリソースオーナーのやりとり。</p>
<p>クライアントは認可を要求し、<strong>認可グラント</strong>を受け取る。</p>
</li>
<li>
<p>クライアントと認可サーバのやりとり。</p>
<p>クライアントは<strong>認可グラント</strong>を提示し、<strong>アクセストークン</strong>を受け取る。</p>
</li>
<li>
<p>クライアントとリソースサーバのやりとり。</p>
<p>クライアントは<strong>アクセストークン</strong>を提示し、リクエストが成立する。</p>
</li>
</ol>
<h3 id="13認可グラント">1.3認可グラント</h3>
<p>ここからは用語の説明。</p>
<p>認可グラントは、リソースオーナーが認可したことを表すものだよ。
グラントタイプは4種類。</p>
<ul>
<li>認可コード</li>
<li>インプリシット</li>
<li>リソースオーナーパスワードクレデンシャル</li>
<li>クライアントクレデンシャル</li>
</ul>
<p>それぞれ説明します。</p>
<h4 id="131認可コード">1.3.1認可コード</h4>
<p>認可サーバが発行する秘密の文字列。</p>
<p>クライアントはリソースオーナーを認可サーバにリダイレクトする。
認可サーバ上で認証されたら、認可コードとともにリダイレクトされて、戻ってくる。</p>
<p>セキュリティ的にgood.</p>
<h4 id="132インプリシット">1.3.2インプリシット</h4>
<p>認可グラントを渡さず、直接<strong>アクセストークン</strong>をクライアントに返す。</p>
<p>認可コードフローを短縮したもの。そもそも上で説明した認可コードフローと違うことをやってる。</p>
<h4 id="133リソースオーナーパスワードクレデンシャル">1.3.3リソースオーナーパスワードクレデンシャル</h4>
<p>IDとパスワードのようなもの。</p>
<p>はじめにで記載されているイマイチな例。
ただし、クライアントがOSの一部の場合はいいんじゃないか、ということ。</p>
<h4 id="134クライアントクレデンシャル">1.3.4クライアントクレデンシャル</h4>
<p>秘密の文字列。</p>
<p>あらかじめクライアントと認可サーバの間で取り決めておく。
認可範囲がクライアントの管理かである場合に使う。</p>
<h3 id="14アクセストークン">1.4アクセストークン</h3>
<p>秘密の文字列。リソースへアクセスする際に使う。</p>
<h3 id="15リフレッシュトークン">1.5リフレッシュトークン</h3>
<p>オプションの項目。
期限が切れたアクセストークンの代わりに、新しいアクセストークンをもらうために利用することができる。</p>
<p>アクセストークンの有効期限が切れるたび認可グラントを提示するのはセキュリティリスクが高まる。
リフレッシュの際には、専用のトークンを利用することで、認証情報のやりとりを減らすことができる。</p>
<p>リフレッシュトークンを利用する流れは以下の通り。</p>
<ol>
<li>
<p>クライアントと認可サーバのやりとり（認可フローの2に相当）</p>
<p><strong>認可グラント</strong>を提示して、<strong>アクセストークンとリフレッシュトークン</strong>を受け取る。</p>
</li>
<li>
<p>クライアントとリソースサーバのやりとり（認可フローの3に相当）</p>
<p>クライアントは<strong>アクセストークン</strong>を提示して、リソースへアクセスする。
<strong>有効期限が切れていたら、エラーを返して無効であることを伝える。</strong></p>
</li>
<li>
<p>クライアントと認可サーバのやりとり</p>
<p>クライアントは<strong>リフレッシュトークン</strong>を提示して、新しい<strong>アクセストークン</strong>を受け取る。</p>
</li>
</ol>
<h3 id="1619">1.6〜1.9</h3>
<p>割愛</p>
]]></content>
        </item>
        
        <item>
            <title>AWS SAA受験記</title>
            <link>https://katataku.dev/posts/aws-ssa/</link>
            <pubDate>Sun, 12 Jul 2020 23:45:31 +0900</pubDate>
            
            <guid>https://katataku.dev/posts/aws-ssa/</guid>
            <description>AWS認定 Solution Architect associateに合格したので勉強したポイントを記録する。 インプット学習 まずは、有名な黒本をメルカリで購入した。正直あまり読</description>
            <content type="html"><![CDATA[<p>AWS認定　Solution Architect associateに合格したので勉強したポイントを記録する。</p>
<h2 id="インプット学習">インプット学習</h2>
<p>まずは、有名な黒本をメルカリで購入した。正直あまり読んでない。</p>
<p>ひたすら、black belt Onlineセミナーをyoutubeで見ていた。
腹落ちしてない分野は2回、3回と繰り返し確認。</p>
<h2 id="アウトプット学習">アウトプット学習</h2>
<p>udemyの試験対策講座を受講した。
「問題を解く」→「間違った分野のblackbeltセミナーや公式documentを見返す」ということを繰り返す。（2-3テスト分）</p>
<p>申し込み前には、公式の模試を受験した。8割取れてたので、申し込みを決意。</p>
<h2 id="試験当日">試験当日</h2>
<p>自宅から最寄りの試験会場を選択した。
試験開始1.5時間前には同じビルのスタバに入って追い込みをした。
復習のつもりでよくある質問を読み返していたら、はじめて知る知識もあって少し焦った。</p>
<h2 id="つまづきポイント">つまづきポイント</h2>
<p>自分がつまずいたポイントは以下の通り。</p>
<h3 id="iam">IAM</h3>
<p>ユーザ、ロール、ポリシーがごっちゃになった。
さらに（AWS）アカウントという用語もあり、整理が必要。
実際に触っているとすぐ腹落ちした。</p>
<h3 id="ec2のコスト最適化">EC2のコスト最適化</h3>
<p>EC2のスポットインスタンス、RIやsaving plansなどが最後まで混乱していた。
自腹で実機を触っていれば感覚が違ったかも？</p>
<h3 id="s3のコスト最適化">S3のコスト最適化</h3>
<p>こちらも同じ。IAとかが最後まで頭の中でごっちゃになっていた。
上記EC2とまとめて、直前にまとめて整理すると理解できた。</p>
]]></content>
        </item>
        
        <item>
            <title>hugoで利用するスクリプトを作成した</title>
            <link>https://katataku.dev/posts/hugo-scripts/</link>
            <pubDate>Sun, 12 Jul 2020 00:45:56 +0900</pubDate>
            
            <guid>https://katataku.dev/posts/hugo-scripts/</guid>
            <description>hugoをHitHub pagesへのデプロイする際に利用するスクリプトを作成した。 local deploy コンテンツを生成し、ローカル確認するためにサーバーを起</description>
            <content type="html"><![CDATA[<p>hugoをHitHub pagesへのデプロイする際に利用するスクリプトを作成した。</p>
<h2 id="local-deploy">local deploy</h2>
<p>コンテンツを生成し、ローカル確認するためにサーバーを起動する。
こちらは単純。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">hugo;
hugo server -D
</code></pre></div><h2 id="deploy">deploy</h2>
<p>確認した結果を、GitHubリポジトリにpushするためのスクリプト。
全体の整合性を担保するために、リコンパイルを実施している。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e">#!/bin/sh
</span><span style="color:#75715e"></span>
echo -e <span style="color:#e6db74">&#34;\033[0;32mDeploying updates to GitHub...\033[0m&#34;</span>

hugo

git add docs/

msg<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;rebuilding site `date`&#34;</span>
<span style="color:#66d9ef">if</span> <span style="color:#f92672">[</span> $# -eq <span style="color:#ae81ff">1</span> <span style="color:#f92672">]</span>
  <span style="color:#66d9ef">then</span> msg<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span>$1<span style="color:#e6db74">&#34;</span>
<span style="color:#66d9ef">fi</span>
git commit -m <span style="color:#e6db74">&#34;</span>$msg<span style="color:#e6db74">&#34;</span>

git push origin master
</code></pre></div><p><a href="https://qiita.com/KoKeCross/items/2b24908f60d235bcc49f">こちら</a>を参考に作成した。</p>
]]></content>
        </item>
        
    </channel>
</rss>
