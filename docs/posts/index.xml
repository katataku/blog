<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on katataku&#39;s blog</title>
        <link>http://www.katataku.dev/posts/</link>
        <description>Recent content in Posts on katataku&#39;s blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>jp-JP</language>
        <lastBuildDate>Wed, 15 Jul 2020 22:18:40 +0900</lastBuildDate>
        <atom:link href="http://www.katataku.dev/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>初めてRFC読んでみた その１</title>
            <link>http://www.katataku.dev/posts/rfc6749-1/</link>
            <pubDate>Wed, 15 Jul 2020 22:18:40 +0900</pubDate>
            
            <guid>http://www.katataku.dev/posts/rfc6749-1/</guid>
            <description>はじめに 業務でAPI GWの認証認可部分を担当することになった。 引継ぎ元となる先輩に認証認可の入門書のオススメを聞いたところ、 「世の中の入門書</description>
            <content type="html"><![CDATA[<h2 id="はじめに">はじめに</h2>
<p>業務でAPI GWの認証認可部分を担当することになった。
引継ぎ元となる先輩に認証認可の入門書のオススメを聞いたところ、
「世の中の入門書は中級者向けだから、RFC読めばいいよ」という、ありがたいお言葉をいただいた。</p>
<p>そこで、はじめてRFCを読むわけだが、
人目見ただけで分量に嫌気が差した。</p>
<p>世の中には簡単に説明している記事はあるが、読みたいのはあくまでRFC。
そこで、あくまでRFCの記載内容にしたがって、簡単に要約してみる。</p>
<p>今回は<a href="https://openid-foundation-japan.github.io/rfc6749.ja.html">RFC6749</a>を読むことにする。
なお、実装にあたっては厳密性が重要になるため、原文（もちろん英語版）で理解することが前提とのこと。</p>
<h2 id="1はじめに">1.はじめに</h2>
<p>要約と言いつつ、さっそく銀行と通帳アプリで例えることにする。</p>
<p>通帳アプリに銀行のパスワード教えるのはいまいちだよね。
なぜなら</p>
<ul>
<li>通帳アプリが利用者本人と全く同じ権限使えるよね。</li>
<li>利用者が通帳アプリを複数使っていた場合、アプリごとに利用を停止できない。パスワード変更すれば停止できるけど、全部利用止まっちゃうよね。</li>
<li>通帳アプリの情報漏洩が問題だよね。
という理由。</li>
</ul>
<p>そこで、権限移譲用の別のトークンを用意しよう！</p>
<h3 id="11登場人物">1.1登場人物</h3>
<ul>
<li>リソースオーナー：通帳アプリの利用者（個人情報のオーナーってイメージ）</li>
<li>リソースサーバ：銀行のサーバ。</li>
<li>クライアント：通帳アプリ</li>
<li>認可サーバ ：通帳アプリにトークンを発行するサーバ 。銀行のサーバ と同じでもいいし、違うかもしれない。</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>AWS SAA受験記</title>
            <link>http://www.katataku.dev/posts/aws-ssa/</link>
            <pubDate>Sun, 12 Jul 2020 23:45:31 +0900</pubDate>
            
            <guid>http://www.katataku.dev/posts/aws-ssa/</guid>
            <description>AWS 認定 Solution Architect associateに合格したので勉強したポイントを記録する。 インプット学習 まずは、有名な黒本をメルカリで購入した。正直あまり読んで</description>
            <content type="html"><![CDATA[<p>AWS 認定　Solution Architect associateに合格したので勉強したポイントを記録する。</p>
<h2 id="インプット学習">インプット学習</h2>
<p>まずは、有名な黒本をメルカリで購入した。正直あまり読んでない。</p>
<p>ひたすら、black belt Online セミナーをyoutubeで見ていた。
腹落ちしてない分野は2回、３回と繰り返し確認。</p>
<h2 id="アウトプット学習">アウトプット学習</h2>
<p>udemyの試験対策講座を受講した。
「問題を解く」→「間違った分野のblackbeltセミナーや公式documentを見返す」ということを繰り返す。（2-3テスト分）</p>
<p>申し込み前には、公式の模試を受験した。8割取れてたので、申し込みを決意。</p>
<h2 id="試験当日">試験当日</h2>
<p>自宅から最寄りの試験会場を選択した。
試験開始1.5時間前には同じビルのスタバに入って最後の追い込みをした。
復習のつもりでよくある質問を読み返していたら、初めて知る知識もあって少しあせった。</p>
<h2 id="つまづきポイント">つまづきポイント</h2>
<p>自分がつまずいたポイントは以下の通り。</p>
<h3 id="iam">IAM</h3>
<p>ユーザ、ロール、ポリシーがごっちゃになった。
さらに（AWS）アカウントという用語もあり、整理が必要。
実際に触っているとすぐ腹落ちした。</p>
<h3 id="ec2のコスト最適化">EC2のコスト最適化</h3>
<p>EC2のスポットインスタンス、RIやsaving plansなどが最後まで混乱していた。
自腹で実機を触っていれば感覚が違ったかも？</p>
<h3 id="s3のコスト最適化">S3のコスト最適化</h3>
<p>こちらも同じ。IAとかが最後まで頭の中でごっちゃになっていた。
上記EC2とまとめて、直前にまとめて整理すると理解できた。</p>
]]></content>
        </item>
        
        <item>
            <title>hugoで利用するスクリプトを作成した</title>
            <link>http://www.katataku.dev/posts/hugo-scripts/</link>
            <pubDate>Sun, 12 Jul 2020 00:45:56 +0900</pubDate>
            
            <guid>http://www.katataku.dev/posts/hugo-scripts/</guid>
            <description>hugoをgithub pagesにデプロイする際に利用するスクリプトを作成した。 local deploy コンテンツを生成し、ローカル確認するためにサーバ を起動す</description>
            <content type="html"><![CDATA[<p>hugoをgithub pagesにデプロイする際に利用するスクリプトを作成した。</p>
<h2 id="local-deploy">local deploy</h2>
<p>コンテンツを生成し、ローカル確認するためにサーバ を起動する。
こちらは単純。</p>
<pre><code>hugo;
hugo server -D 
</code></pre><h2 id="deploy">deploy</h2>
<p>確認した結果を、githubリポジトリにpushするためのスクリプト。
全体の整合性を担保するために、リコンパイルを実施している。</p>
<pre><code>#!/bin/sh

echo -e &quot;\033[0;32mDeploying updates to GitHub...\033[0m&quot;

hugo

git add docs/

msg=&quot;rebuilding site `date`&quot;
if [ $# -eq 1 ]
  then msg=&quot;$1&quot;
fi
git commit -m &quot;$msg&quot;

git push origin master
</code></pre><p><a href="https://qiita.com/KoKeCross/items/2b24908f60d235bcc49f">こちら</a>を参考に作成した。</p>
]]></content>
        </item>
        
        <item>
            <title>First Article</title>
            <link>http://www.katataku.dev/posts/first-article/</link>
            <pubDate>Sat, 11 Jul 2020 23:49:00 +0900</pubDate>
            
            <guid>http://www.katataku.dev/posts/first-article/</guid>
            <description>はじめての記事</description>
            <content type="html"><![CDATA[<p>はじめての記事</p>
]]></content>
        </item>
        
    </channel>
</rss>
